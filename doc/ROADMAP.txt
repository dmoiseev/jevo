before
  + Разобраться с canvas окном
  + Запустить систему в памяти
  + Добавить WORLD_MAX_ORGANISMS после которого размножеие невозможно
  + Добавить базовые операции: clone, getEnergy, steps, ...
  + Организмы должны жить в защищенной среде. Их ошибки (в коде) не должны приводить к вылету всей системы
  + Добавить возможность примитивного зрения (getEnergy(x,y))
  + Добавить базовые принципы: скорость мутирования, отбор, размножение
  + Реализовать добавление\удаление\изменение кода организма
v0.1 (подумать что из списка должно быть включено сюда)
  - Подумать о разной вероятности ASCII символов в коде. Например пробел будет более вероятным, чем оператор ^=. В догонку к этому нужно сделать мутатор более "умным". Мутации не должны добавляться куда попало, нужно каким-то способом вставлять\менять\удалять их в более "правильные" места. Чтобы они с меньшей вероятностью ломали код.
  - Если число организмов выросло до максимума, то нужно убить самых слабых
  - Сделать короткие команды для удаленного терминала (консоли): @create-organisms, @get-ips, @set-config cfg val,...
  - Подумать над автоматическим клонированием организмов после определенного кол-ва итераций (под вопросом)
  - Сделать более яркую раскраску организмов (сейчас они блеклые - темно голубые) в зависимости от кол-ва энергии
  - Тотальная оптимизация с фиксированными типами
  - Если все умерли, создавать организмы снова и так до стабильного состояния
  - Реализовать паузу\пуск всего инстанса
  - Реализовать сохранение\загрузку всего в файл
  - Все должно быть наследуемым признаком (кроме энергии) (проверить все ли реализовано)
  - Глянуть фотку на телефоне (там много пунктов для этого списка)
  - Добавить клонирование в мутатор (обдумать детали)
  - Комменты в Julia docile или что-то похожее
  - Подумать о половом размножении. Можно ли его вообще реализовать для кода?
  - Подумать про доступ к коду между организмами, когда они рядом. Можно отдельной командой.
  - Поддержка нескольких инстансов
  - Покрыть все юнит тестами